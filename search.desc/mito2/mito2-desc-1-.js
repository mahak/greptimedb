searchState.loadedDescShard("mito2", 1, "Gets region by region id.\nInserts a new region into the map.\nInserts a new region into the map.\nInstalls the manifest changes from the current version to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the region is downgrading.\nReturns whether the region is flushable.\nReturns whether the region is readonly.\nReturns true if the region exists.\nReturns true if the region exists.\nReturns whether the region is in staging mode.\nReturns whether the region is writable.\nReturn last compaction time in millis.\nLast compaction time in millis.\nReturns last flush timestamp in millis.\nLast flush time in millis.\nList all regions.\nContext to maintain manifest for this region.\nManager to maintain manifest for this region.\nReturns the SST entries of the region.\nMemtable builder for the region.\nReturns current metadata of the region.\nRegion opener.\nOptions for a region.\nReturns primary key encoding of the region.\nThe provider of log store.\nId of this region.\nReturns the region statistic.\nRemove region by id.\nRemove region by id.\nSets the altering state. You should call this method in …\nSets the dropping state. You should call this method in …\nSets the editing state. You should call this method in the …\nSets the region role state.\nSets the <code>RegionRole</code>.\nSets the region role state gracefully. This acquires the …\nSets the staging state.\nSets the truncating state. You should call this method in …\nReturns the state of the region.\nThe state of the region. The region checks the state …\nmanifest stats\nStop background managers for this region.\nSwitches the region state to …\nReturns the table dir.\nProvider to get current time.\nThe topic’s latest entry id since the region’s last …\nUpdate compaction time to now millis.\nUpdate flush time to current time.\nUpdates the manifest if current state is <code>expect_state</code>.\nVersion control of mito engine.\nReturns current version of the region.\nVersion controller for this region.\nRegisters <code>sender</code> for an opening region; Otherwise, it …\nGets writable non-staging region by region id.\nGets writable region by region id.\nGets writable region by region id.\nThe total bytes written to the region.\nA fetcher to retrieve partition expr for a region.\nA loader for loading metadata from a region dir.\nBuilder to create a new MitoRegion or open an existing one.\nBuilds the region metadata.\nSets the cache manager for the region.\nChecks whether the recovered region has the same schema as …\nWrites region manifest and creates a new region if it does …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an object store corresponding to <code>name</code>. If <code>name</code> is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the metadata of the region from the region dir.\nLoads the manifest of the region from the region dir.\nReturns a new manifest options.\nTries to open the region and returns <code>None</code> if the region …\nSets metadata builder of the region to create.\nReturns a new opener.\nCreates a new <code>RegionOpenerBuilder</code>.\nReturns the directory to the manifest files.\nOpens an existing region in read only mode.\nSets options for the region.\nParses and sets options for the region.\nComputes the region directory from table_dir and region_id.\nSets the replay checkpoint for the region.\nReplays the mutations from WAL and inserts mutations to …\nSets the <code>skip_wal_replay</code>.\nIf a WalEntryReader is set, the RegionOpener will use …\nOptions for compactions\nOptions for index.\nOptions for the inverted index.\nKeeps the last non-null field for each row.\nKeeps the last row.\nOptions for region level memtable.\nMode to handle duplicate rows while merging.\nPartition tree memtable options.\nOptions that affect the entire region.\nWe need to define a new struct without enum fields as …\nTime window compaction strategy.\nTime window compaction options.\nIf append mode is enabled, the region keeps duplicate rows.\nCompaction options.\nNumber of rows to freeze a data part.\nWhether to fall back to local compaction if remote …\nTotal bytes of dictionary to keep in fork.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe column ids that should be ignored when building the …\nMax keys in an index shard.\nIndex options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptions for the inverted index.\nCompaction time window defined when creating tables.\nMemtable options.\nReturns the <code>merge_mode</code> if it is set, otherwise returns the …\nThe mode to merge duplicate rows. Only takes effect when …\nReturns <code>true</code> if deduplication is needed.\nConverts the <code>options</code> map to a json object.\nReturns the <code>primary_key_encoding</code> if it is set, otherwise …\nReturns the primary key encoding mode.\nPrimary key encoding mode.\nWhether to use remote compaction.\nThe number of rows in a segment.\nCustom storage. Uses default storage if it is <code>None</code>.\nCompaction time window defined when creating tables.\nReturns time window in second resolution.\nMinimum file num in every time window to trigger a …\nRegion SST files TTL.\nRegion SST files TTL.\nValidates options.\nValidates whether the <code>options_map</code> has valid options for …\nWal options.\nStatic metadata of a region.\nVersion builder.\nControls metadata and sequence numbers for a region.\nData of VersionControl.\nAdd files to the builder.\nApplies region option changes and generates a new version.\nAlter schema of the region.\nApply edit to the builder.\nApply edit to current version.\nBuilds a new Version from the builder. It overwrites the …\nSequence number of last committed data.\nSequence number of last committed data.\nSets compaction time window.\nInferred compaction time window from flush.\nReturns current copy of data.\nSets flushed entry id.\nInclusive max WAL entry id of flushed data.\nSets flushed sequence.\nInclusive max sequence of flushed data.\nFreezes the mutable memtable if it is not empty.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new builder from an existing version.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarker of whether this region is dropped/dropping\nLast WAL entry Id.\nMark all opened files as deleted and set the delete marker …\nSets memtables.\nMutable and immutable memtables.\nSets metadata.\nMetadata of the region.\nReturns a new builder.\nReturns a new VersionControl with specific <code>version</code>.\nSets options.\nOptions of the region.\nOverwrites the current version with a new version.\nRemove memtables from the builder.\nApproximate timeseries count in current version.\nUpdates the <code>committed_sequence</code> of version.\nUpdates last entry id.\nUpdates committed sequence and entry id.\nSSTs of the region.\nTruncate current version.\nSets truncated entry id.\nLatest entry id during the truncating table.\nLatest version.\nContext to keep region metadata and buffer write requests.\nNotifier to notify write result on drop.\nEncode and add WAL entry to the writer.\nNotifiers for bulk requests.\nPending bulk write requests\nRows to delete.\nError to send to the waiter.\nThe write operation is failed and we should not write to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new notify from the <code>sender</code>.\nReturns an empty context.\nNext entry id of WAL to write.\nNext sequence number to write.\nNotifiers to send write results to waiters.\nSend result to the waiter.\nNumber of rows to be written.\nWal options of the region being written to.\nPush mutation to the context. This method adopts the …\nRows to put.\nId of region to write.\nSender to send write result to the waiter for this …\nSets error and marks all write operations are failed.\nUpdates next entry id.\nVersion of the region while creating the context.\nVersionControl of the region.\nValid WAL entry to write.\nConsumes mutations and writes them into mutable memtable.\nThe total bytes written to the region.\nNotifications from internal background jobs.\nNotification from a background job.\nBulk inserts request and region metadata.\nA failing compaction result.\nCompaction has failed.\nNotifies a compaction job has finished.\nCompaction has finished.\nDdl request to a region.\nDDL request to a region.\nUse RegionEdit to edit a region directly.\nNotifies a flush job is failed.\nFlush has failed.\nNotifies a flush job is finished.\nFlush has finished.\nCallback on failure.\nOptional output result sender.\nOneshot output result sender.\nRegion change result.\nNotifies the region the result of writing region change …\nRegion edit result.\nRequest to edit a region directly.\nNotifies the regin the result of editing region.\nSender and Ddl request.\nSender and write request.\nThe internal commands.\nNotify a worker to stop.\nKeep the manifest of a region up to date.\nTruncate result.\nNotifies the truncate result of a region.\nRequest sent to a worker\nRequest sent to a worker with timestamp\nWrite to a region.\nRequest to write a region.\nFlush timer.\nChecks whether we should allow a row doesn’t provide …\nChecks schema of rows is compatible with schema of the …\nReturns the default value for specific column.\nGets column index by name.\nRegion edit to apply.\nRegion edit to apply.\nRegion edit to apply.\nThe error source of the failure.\nThe error source of the failure.\nReturns estimated size of the request.\nFills default value for specific <code>columns</code>.\nTries to fill missing columns.\nEntry id of flushed data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether each column has null.\nWrite hint.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks the schema and fill missing columns.\nMemtables to remove.\nMap column name to column index in <code>rows</code>.\nCreates a new request.\nCreates a new output sender.\nCreates a sender.\nThe new region metadata to apply.\nCreates an empty sender.\nHandles <code>err</code> on failure.\nCompaction succeeded but failed to update manifest or …\nMarks the flush job as successful and observes the timer.\nType of the write request.\nReturns the encoding hint.\nRegion to write.\nRegion id of the request.\nRegion id.\nRegion id.\nRegion id.\nRegion id.\nRegion id.\nRegion metadata on the time of this request is created.\nDdl request.\nTruncate result.\nResult from the manifest manager.\nResult from the manifest manager.\nRows to write.\nSends the <code>result</code>.\nSends the <code>result</code> and consumes the sender.\nSends the <code>result</code> and consumes the inner sender.\nResult sender.\nResult sender.\nResult sender.\nResult sender.\nResult sender.\nReturns the latest manifest version and a boolean …\nFlush result senders.\nCompaction result senders.\nStart time of compaction task.\nTakes the inner sender.\nConverts request from a RegionRequest.\nThe sender to notify the result to the region engine.\nValidate proto value schema.\nSets the write hint.\nInternal notification.\nId of the region to send.\nId of the region to send.\nThe SettableRegionRoleState.\nThe sender of [SetReadonlyResponse].\nCompactionJob is a remote job that compacts a set of files …\nCompactionJobResult is the result of a compaction job.\nDefaultNotifier is a default implementation of Notifier …\nUnique id for a remote job.\nNotifier is used to notify the mito engine when a remote …\nRemoteJob is a job that can be executed remotely. For …\nRemoteJobResult is the result of a remote job.\nRemoteJobScheduler is a trait that defines the API to …\nSNAFU context selector for the <code>RemoteJobSchedulerError</code> …\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNotify the mito engine that a remote job is completed.\nParses job id from string.\nThe sender to send WorkerRequest to the mito engine. This …\nSends a job to the scheduler and returns a UUID for the …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nSend the result of the compaction job to these waiters.\nRequest scheduler based on local state.\nThe state of scheduler\nScheduler defines a set of API to schedule Jobs\nToken used to halt the scheduler\nReturns the argument unchanged.\nTask handles\nCalls <code>U::from(self)</code>.\nStarts a new scheduler.\nSchedules a Job\nSends jobs to flume bounded channel\nState of scheduler\nStops scheduler. If <code>await_termination</code> is set to true, the …\nif await_termination is true, scheduler will wait all …\nDefault write buffer size, it should be greater than the …\nDefault number of concurrent write, it only works on …\nOptions of flat schema.\nStructures to describe metadata of files.\nReturns the argument unchanged.\nCreates a options according to the primary key encoding.\nFields for internal columns.\nCalls <code>U::from(self)</code>.\nSST in parquet format.\nFields for internal columns.\nWhether to store primary key columns additionally instead …\nWhether to use dictionary encoding for string primary key …\nHelper function to create a dictionary field from a field …\nHelper function to create a dictionary field from a field.\nGets the arrow schema to store in parquet.\nGets the arrow schema to store in parquet.\nGets the arrow schema to store in parquet.\nSST version.\nBloom Filter index\nHandle to a SST file.\nInner data of FileHandle.\nMetadata of a SST file.\nTime range (min and max timestamps) of a SST file. Both …\nFull-text index.\nType of index.\nInverted index.\nType to store SST level.\nMaximum level of SSTs.\nCross-region file id.\nAvailable indexes of the file.\nReturns true if the file has a bloom filter index.\nDelete\nGets the file id.\nReturns the cross-region file id.\nReturns the cross-region file id.\nThe id of the file.\nCompared to normal file names, FileId ignore the extension\nReturns the complete file path of the file.\nSize of the file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the file has a fulltext index\nSize of the index file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the file has an inverted index\nSST level of the file.\nMark the file as deleted and will delete it on drop …\nReturns a reference to the FileMeta.\nCreates a new RegionFileId from <code>region_id</code> and <code>file_id</code>.\nNumber of row groups in the file.\nNumber of rows in the file.\nChecks if two inclusive timestamp ranges overlap with each …\nPartition expression from the region metadata when the …\nGets the region id.\nReturns the region id of the file.\nThe region that creates the file.\nRegion that created the file. The region id may not be the …\nSequence in this file.\nCustom serde functions for partition_expr field in FileMeta\nReturns the time range of the file.\nTimestamp range of file. The timestamps have the same time …\n<code>ToString::to_string</code>, but without panic on OOM.\nA worker to delete files in background.\nPurger that purges file for current region.\nA no-op file purger can be used in combination with …\nCreates a file purger based on the storage type of the …\nCreates a local file purger that deletes files from both …\nDeletes the file(and it’s index, if any) from cache and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new purger.\nNotify the purger of a new file created. This is useful …\nSend a request to remove the file. If <code>is_delete</code> is true, …\nStop the scheduler of the file purger.\nManages all file references in one datanode. It keeps …\nFile references for a table. It contains all files …\nThe tmp file uploaded to object storage to record one table…\nAdds a new file reference. Also records the access layer …\n(FileRef, Ref Count) meaning how many FileHandleInner is …\nTODO(discord9): use no hash hasher since table id is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets all ref files for the given table id, excluding those …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nManifest version when this manifest is read for it’s …\nDatanode id. used to determine tmp ref file name.\nRemoves a file reference. If the reference count reaches …\nOutput of the bloom filter creation.\nOutput of the fulltext index creation.\nBase output of the index creation.\nOutput of the index creation.\nThe index creator that hides the error handling details.\nOutput of the inverted index creation.\nAborts the index creation.\nBloom filter output.\nBuilds indexer of given file id to [index_file_path].\nSanity check for arguments and create a new Indexer if …\nAvailable columns in the index.\nAvailable columns in the index.\nAvailable columns in the index.\nAvailable columns in the index.\nReturns false if the finish failed.\nReturns false if the update failed.\nReturns false if the update failed.\nReturns false if the update failed.\nReturns false if the update failed.\nReturns false if the update failed.\nReturns false if the update failed.\nSize of the file.\nFinalizes the index creation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFulltext index output.\nSize of the index.\nSize of the index.\nSize of the index.\nSize of the index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverted index output.\nNumber of rows in the index.\nNumber of rows in the index.\nNumber of rows in the index.\nNumber of rows in the index.\nUpdates the index with the given batch.\nUpdates the index with the given flat format RecordBatch.\n<code>BloomFilterIndexApplier</code> applies bloom filter predicates to …\nApplies bloom filter predicates to the provided SST file …\nCreates a blob reader from the cached or remote index file.\nCache for bloom filter index.\nCreates a blob reader from the cached index file\nFile cache to read the index file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>BloomFilterIndexApplier</code>.\nObject store to read the index file.\nPath type for generating file paths.\nReturns the predicate key.\nPredicate key. Used to identify the predicate and fetch …\nBloom filter predicates. For each column, the value will …\nFactory to create puffin manager.\nCache for puffin metadata.\nCreates a blob reader from the remote index file\nDirectory of the table.\nBuilds the applier with given filter expressions\nCollects an equality expression (column = value)\nCollects an in list expression in the form of …\nCollects an or expression in the form of …\nHelper function to get the column id and type\nHelper function to encode a literal into bytes.\nHelper function to get the column and literal value from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper function to get non-null literal value\nRecursively traverses expressions to collect bloom filter …\nThe indexer for the bloom filter index.\nThe buffer size for the pipe used to send index data to …\nAborts index creation and clean up garbage.\nWhether the indexing process has been aborted.\nCodec for decoding primary keys.\nReturns the column ids to be indexed.\nThe bloom filter creators.\nTODO(zhongzc): duplicate with …\nData flow of finishing index:\nFinishes index creation and cleans up garbage. Returns the …\nReturns the argument unchanged.\nThe global memory usage.\nCalls <code>U::from(self)</code>.\nReturns the memory usage of the indexer.\nRegion metadata for column lookups.\nCreates a new bloom filter indexer.\nThe statistics of the indexer.\nThe provider for intermediate files.\nUpdates index with a batch of rows. Garbage will be …\nUpdates the bloom filter index with the given flat format …\n<code>FulltextIndexApplier</code> is responsible for applying fulltext …\nThe source of the index.\nAdjusts the coarse output. Makes the output ranges based …\nApplies coarse-grained fulltext index to the specified SST …\nApplies fine-grained fulltext index to the specified SST …\nReturns the blob with the specified key from local cache …\nCache for bloom filter index.\nReturns the directory with the specified key from local …\nReturn reader and whether it is fallbacked to remote store.\nLocal file cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe source of the index.\nInitializes the coarse output. Must call …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FulltextIndexApplier</code>.\nPath type for generating file paths.\nReturns the predicate key.\nPredicate key. Used to identify the predicate and fetch …\nThe puffin manager factory.\nThe puffin metadata cache.\nStore responsible for accessing remote index files.\nRequests to be applied.\nConverts terms to predicates.\nSets the bloom filter cache.\nSets the file cache.\nSets the puffin metadata cache.\n<code>FulltextIndexApplierBuilder</code> is a builder for …\nA query to be matched in fulltext index.\nA request for fulltext index.\nA term to be matched in fulltext index.\nBuilds <code>SstIndexApplier</code> from the given expressions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FulltextIndexApplierBuilder</code>.\nConvert terms to a query string.\nSets the bloom filter cache to be used by the …\nSets the file cache to be used by the <code>FulltextIndexApplier</code>.\nSets the puffin metadata cache to be used by the …\n<code>AltFulltextCreator</code> is an alternative fulltext index …\n<code>FulltextIndexer</code> is responsible for creating fulltext …\n<code>SingleCreator</code> is a creator for a single column.\nAborts the index creation.\nWhether the index creation was aborted.\nColumn ID.\nReturns IDs of columns that the creator is responsible for.\nColumn name.\nWhether the index should be compressed.\nCreators for each column.\nFinalizes the index creation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInner creator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the memory usage of the index creator.\nCreates a new <code>FulltextIndexer</code>.\nStatistics of index creation.\nUpdates the index with the given batch.\nUpdates the fulltext index with the given flat format …\n<code>IntermediateLocation</code> produces paths for intermediate files …\n<code>IntermediateManager</code> provides store to access to …\n<code>TempFileProvider</code> implements <code>ExternalTempFileProvider</code>. It …\nRemoves all intermediate files.\nReturns the directory to clean up when the sorting is done\nReturns the path of the directory for intermediate files …\nReturns the path of the intermediate file with the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the intermediate directory path for building …\nReturns the intermediate file id from the path.\nCreate a new <code>IntermediateManager</code> with the given root path. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides the location of intermediate files.\nProvides store to access to intermediate files.\nCreates a new <code>TempFileProvider</code>.\nCreate a new <code>IntermediateLocation</code>. Set the root directory …\nPrunes the intermediate directory for region files.\nPrunes the intermediate directory for SST files.\nReturns the store to access to intermediate files.\nSet the write buffer size for the store.\n<code>InvertedIndexApplier</code> is responsible for applying …\nApplies predicates to the provided SST file id and returns …\nCreates a blob reader from the cached index file.\nThe cache of index files.\nReturns the argument unchanged.\nPredefined index applier used to apply predicates to index …\nCalls <code>U::from(self)</code>.\nIn-memory cache for inverted index.\nCreates a new <code>InvertedIndexApplier</code>.\nPath type for generating file paths.\nReturns the predicate key.\nPredicate key. Used to identify the predicate and fetch …\nThe puffin manager factory.\nPuffin metadata cache.\nCreates a blob reader from the remote index file.\nStore responsible for accessing remote index files.\nThe root directory of the table.\nSets the file cache.\nSets the index cache.\nSets the puffin metadata cache.\nConstructs an <code>InvertedIndexApplier</code> which applies …\nHelper function to add a predicate to the output.\nConsumes the builder to construct an <code>InvertedIndexApplier</code>, …\nCollects a <code>BETWEEN</code> expression in the form of …\nCollects a comparison expression in the form of …\nCollects an eq expression in the form of <code>column = lit</code>.\nRecursively collects eq list.\nCollects an in list expression in the form of …\nCollects eq list in the form of …\nCollects a regex match expression in the form of …\nHelper function to get the column id and the column type …\nHelper function to get the column name of a column …\nHelper function to encode a literal into bytes.\nFile cache, required argument for constructing …\nReturns the argument unchanged.\nColumn ids of the columns that are indexed.\nCalls <code>U::from(self)</code>.\nCache for inverted index.\nMetadata of the region, used to get metadata like column …\nCreates a new <code>InvertedIndexApplierBuilder</code>.\nHelper function to get a non-null literal.\nObject store, required argument for constructing …\nStores predicates during traversal on the Expr tree.\nPath type for generating file paths.\nThe puffin manager factory.\nCache for puffin metadata.\nDirectory of the table, required argument for constructing …\nRecursively traverses expressions to collect predicates. …\nSets the file cache.\nSets the inverted index cache.\nSets the puffin metadata cache.\n<code>InvertedIndexer</code> creates inverted index for SST files.\nThe minimum memory usage threshold for one column.\nThe buffer size for the pipe used to send index data to …\nAborts index creation and clean up garbage.\nWhether the index creation is aborted.\nCodec for decoding primary keys.\nCache for mapping indexed column positions to their …\nData flow of finishing index:\nFinishes index creation and cleans up garbage. Returns the …\nReturns the argument unchanged.\nThe index creator.\nIds of indexed columns and their names (<code>to_string</code> of the …\nInitializes the column index cache by mapping indexed …\nCalls <code>U::from(self)</code>.\nThe memory usage of the index creator.\nRegion metadata for column lookups.\nCreates a new <code>InvertedIndexer</code>. Should ensure that the …\nStatistics of index creation.\nThe provider of intermediate files.\nUpdates index with a batch of rows. Garbage will be …\nUpdates the inverted index with the given flat format …\nReusable buffer for encoding index values.\nA <code>PuffinFileAccessor</code> implementation that uses an object …\nA factory for creating <code>SstPuffinManager</code> instances.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>PuffinManagerFactory</code> instance.\nThe stager used by the puffin manager.\nThe size of the write buffer used to create object store.\nStage of the index creation process.\nStatistics for index creation. Flush metrics when dropped.\n<code>TimerGuard</code> is a RAII struct that ensures elapsed time is …\nReturns byte count.\nNumber of bytes in the index.\nAccumulated elapsed time for the cleanup stage.\nAccumulated elapsed time for the index finish stage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncreases the byte count of the index creation statistics.\nIncreases the row count of the index creation statistics.\nIndex type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>TimerGuard</code>,\nStarts timing the cleanup stage, returning a <code>TimerGuard</code> to …\nStarts timing the finish stage, returning a <code>TimerGuard</code> to …\nStarts timing the update stage, returning a <code>TimerGuard</code> to …\nReturns row count.\nNumber of rows in the index.\nAccumulated elapsed time for the index update stage.\nA guard that increments a counter when dropped.\nA wrapper around <code>AsyncRead</code> that adds instrumentation for …\nA wrapper around <code>AsyncWrite</code> that adds instrumentation for …\nImplements <code>RangeReader</code> for <code>ObjectStore</code> and record metrics.\nA wrapper around <code>ObjectStore</code> that adds instrumentation for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrement the counter by <code>n</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProxies to <code>ObjectStore::list</code>.\nCreate a new <code>CounterGuard</code>.\nCreate a new <code>InstrumentedStore</code>.\nCreate a new <code>InstrumentedAsyncRead</code>.\nCreate a new <code>InstrumentedAsyncWrite</code>.\nThe underlying object store.\nReturns an <code>InstrumentedRangeReader</code> for the given path. …\nReturns an <code>InstrumentedAsyncRead</code> for the given path. …\nProxies to <code>ObjectStore::remove_all</code>.\nSet the size of the write buffer.\nThe size of the write buffer.\nReturns an <code>InstrumentedAsyncWrite</code> for the given path. …\nGet RegionFileId from sst or index filename\nGenerate region dir from table_dir, region_id and path_type\nDefault batch size to read parquet files.\nDefault row group size for parquet files.\nKey of metadata in parquet SST.\nParquet SST info returned by the writer.\nParquet write options.\nSST file id.\nFile Meta Data\nStructs and functions for reading ranges from a parquet …\nFile size in bytes.\nFormat to store in parquet.\nFormat to store in parquet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex Meta Data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax single output file size. Note: This is not a hard …\nNumber of row groups\nNumber of rows.\nParquet reader.\nPorts private structs from parquet crate.\nRow group size.\nStatistics of parquet SSTs.\nTime range of the SST. The timestamps have the same time …\nBuffer size for async writer.\nParquet writer.\nA range of a parquet SST. Now it is a row group. We can …\nContext shared by ranges of the same parquet SST.\nCommon fields for a range to read and filter batches.\nBase of the context.\nDecoder for primary keys\nReturns the helper to compat batches.\nReturns the helper to compat batches.\nOptional helper to compat batches.\nShared context.\nReturns the file handle of the file range.\nReturns the path of the file to read.\nReturns filters pushed down.\nFilters pushed down.\nCreates a flat reader that returns RecordBatch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new FileRangeContext.\nCreates a new FileRange.\nTRY THE BEST to perform pushed down predicate precisely on …\nTRY THE BEST to perform pushed down predicate precisely on …\nFilters the input RecordBatch by the pushed down predicate …\nFilters the input RecordBatch by the pushed down predicate …\nReturns the format helper.\nHelper to read the SST.\nReturns a reader to read the FileRange.\nReturns the reader builder.\nRow group reader builder for the file.\nIndex of the row group in the SST.\nRow selection for the row group. <code>None</code> means all rows.\nReturns true if FileRange selects all rows in row group.\nSets the <code>CompatBatch</code> to the context.\nConverts a batch that doesn’t have decoded primary key …\nHelper for reading the flat SST format with projection.\nHelper for writing the SST format.\nGets the arrow schema to store in parquet.\nGets the arrow schema of the SST file.\nSST file schema.\nSST file schema.\nBuilds an array for a specific tag column.\nPrimary key codec to decode primary keys.\nColumn id to index in SST.\nConverts a batch to have decoded primary key columns in …\nConvert <code>batch</code> to a arrow record batch to store in parquet.\nConvert a record batch to apply flat format conversion and …\nOptional format converter for handling flat format …\nGets the projection.\nProjection computed for the format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns max values of specific column in row groups.\nGets the metadata of the SST.\nThe metadata stored in the SST.\nMetadata of the region.\nReturns min values of specific column in row groups.\nChecks whether the batch from the parquet file needs to be …\nCreates a new helper.\nCreates a helper with existing <code>metadata</code> and <code>column_ids</code> to …\nCreates a new <code>FlatConvertFormat</code>.\nCreates a sequence array to override.\nReturns null counts of specific column in row groups.\nReturns the position of the op type key column.\nSequence number to override the sequence read from the SST.\nReturns the position of the primary key column.\nIndex of a column in the projected batch by its column id.\nProjected primary key column information: (column_id, …\nGets sorted projection indices to read.\nReturns the position of the sequence column.\nSets the sequence number to override.\nReturns a map that the key is the column id and the value …\nReturns the position of the time index column.\nSet override sequence.\nNumber of columns that have fixed positions.\nHelper to compute the projection for the SST.\nNumber of internal columns.\nNo such column.\nColumn exists but has no statistics.\nArrow array type for the primary key dictionary.\nBuilder type for primary key dictionary array.\nHelper for reading the SST format.\nHelper for writing the SST format with primary key.\nHelper to read parquet formats.\nValues of column statistics of the SST.\nValues of each row group.\nGets the arrow schema to store in parquet.\nGets the arrow schema of the SST file.\nGets the arrow schema of the SST file.\nSST file schema.\nSST file schema.\nColumn id to their index in the projected schema ( the …\nReturns null counts of specific columns. The column should …\nReturns min/max values of specific columns. Returns None …\nComputes the projection.\nConvert <code>batch</code> to a arrow record batch to store in parquet.\nConvert a arrow record batch into <code>batches</code>.\nField column id to its index in <code>schema</code> (SST schema). In …\nField column id to their index in the projected schema ( …\nIndex of a field column by its column id.\nReturns min/max values of the first tag. Returns None if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>StatValues</code> instance from optional statistics.\nGet fields from <code>record_batch</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns max values of specific column in row groups.\nReturns max values of specific column in row groups.\nGets the metadata of the SST.\nGets the metadata of the SST.\nThe metadata stored in the SST.\nReturns min values of specific column in row groups.\nReturns min values of specific column in row groups.\nChecks if sequence override is needed based on all row …\nCreates a new helper.\nCreates a helper with existing <code>metadata</code> and <code>column_ids</code> to …\nCreates a helper to read the flat format.\nCreates a sequence array to override.\nCreates a sequence array to override.\nCreates a helper to read the primary key format.\nCreates a new array for specific <code>primary_key</code>.\nReturns null counts of specific column in row groups.\nReturns null counts of specific column in row groups.\nSequence number to override the sequence read from the SST.\nGets the min/max time index of the row group from the …\nCompute offsets of different primary keys in the array.\nIndex in SST of the primary key.\nGets sorted projection indices to read.\nGets sorted projection indices to read.\nIndices of columns to read from the SST. It contains all …\nIndices of columns to read from the SST. It contains all …\nSets the sequence number to override.\nSets the sequence number to override.\nReturns min/max values of specific tag.\nIndex in SST of the time index.\nSet override sequence.\nAsynchronously fetches byte ranges from an object store.\nParses column orders from Thrift definition. If no column …\nConvert format::FileMetaData to ParquetMetaData\nThe estimated size of the footer and metadata need to read …\nLoad the metadata of parquet file in an async way.\nReturns the argument unchanged.\nGet the size of parquet file.\nCalls <code>U::from(self)</code>.\nAsync load the metadata of parquet file.\nCreate a new parquet metadata loader.\nThe reader is exhausted.\nThe filter to evaluate.\nReader to read a row group of a parquet file in flat …\nThe filter matches the default value.\nThe filter to evaluate or the prune result of the default …\nParquet batch reader to read our SST format.\nParquet SST reader builder.\nThe filter is pruned.\nThe reader is reading a row group.\nMetrics of filtering rows groups and rows.\nParquet reader metrics.\nThe state of a ParquetReader.\nRowGroupReader that reads from [FileRange].\nReader to read a row group of a parquet file.\nBuilder to build a ParquetRecordBatchReader for a row …\nRowGroupReaderContext represents the fields that cannot be …\nContext to evaluate the column filter for a parquet file.\nBuffered batches to return.\nBuffered batches to return.\nAttaches the bloom filter index applier to the builder.\nBuilds a ParquetReader.\nBuilds a ParquetRecordBatchReader to read the row group at …\nDuration to build the parquet reader.\nBuilds a FileRangeContext and collects row groups to read.\nAttaches the cache to the builder.\nStrategy to cache SST data.\nCache.\nReturns the column id.\nId of the column to evaluate.\nFile range context.\nContext of RowGroupReader so adapts to different …\nContext of RowGroupReader so adapts to different …\nContext for file ranges.\nCreates a new reader to read the primary key format.\nReturns the data type of the column.\nThe data type of the column.\nAttaches the expected metadata to the builder.\nExpected metadata of the region while reading the SST. …\nTries to fetch next RecordBatch from the reader.\nField levels to read.\nSST directory.\nHandle of the file to read.\nSST file to read.\nPath of the file to read.\nPath of the file.\nReturns the filter to evaluate.\nFilter to evaluate.\nFiltered row groups and rows metrics.\nSets the flat format flag.\nWhether to use flat format for reading.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttaches the fulltext index applier to the builder.\nDecodes region metadata from key value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttaches the inverted index applier to the builder.\nIndex appliers.\nAdds <code>other</code> metrics to this metrics.\nAdds <code>other</code> metrics to this metrics.\nReturns the metadata of the SST.\nReturns the metrics of the reader.\nGets the metrics.\nLocal scan metrics.\nLocal scan metrics.\nReturns a new ParquetReaderBuilder to read specific SST.\nCreates a new reader.\nCreates a new reader from file range.\nCreates a new flat reader from file range.\nCreates a context for the <code>expr</code>.\nReturns the next RecordBatch.\nReturns the next Batch.\nNumber of batches decoded.\nNumber of record batches read.\nNumber of rows read.\nObject store as an Operator.\nReports metrics.\nReports total rows.\nCached sequence array to override sequences.\nCached sequence array to override sequences.\nCached sequence array to override sequences.\nMetadata of the parquet file.\nPath type for generating file paths.\nAttaches the predicate to the builder.\nPredicate to push down.\nAttaches the projection to the builder.\nMetadata of columns to read.\nProjection mask.\nPrunes row groups by fulltext index. Returns <code>true</code> if the …\nApplies index to prune row groups.\nPrunes row groups by min-max index.\nPrune a column by its default value. Returns false if we …\nGets ReadFormat of underlying reader.\nReads parquet metadata of specific file.\nInner parquet reader.\nInner parquet reader.\nInner parquet reader.\nReader of current row group.\nNumber of row groups filtered by bloom filter index.\nNumber of row groups filtered by fulltext index.\nNumber of row groups filtered by inverted index.\nNumber of row groups filtered by min-max index.\nNumber of row groups before filtering.\nComputes row groups to read, along with their respective …\nNumber of rows in row group filtered by bloom filter index.\nNumber of rows in row group filtered by fulltext index.\nNumber of rows in row group filtered by inverted index.\nNumber of rows filtered by precise filter.\nNumber of rows in row group before filtering.\nDuration to scan the reader.\nRow group selection to read.\nReturns the semantic type of the column.\nSemantic type of the column.\nAn in-memory column chunk\nImplements <code>PageIterator</code> for a single column chunk, …\nFull column chunk and its offset\nAn in-memory collection of column chunks\nColumn chunk data representing only a subset of data pages\nAligns the given size to the multiple of the pooled buffer …\nAssigns compressed chunk binary data to …\nCompressed page of each column.\nCreate PageReader from RowGroupBase::column_chunks\nComputes the max possible buffer size to read the given …\nCreates a new InMemoryRowGroup by <code>row_group_idx</code>.\nFetches the necessary column data into memory\nTry to fetch data from the memory cache or the WriteCache, …\nFetches data from write cache. Returns <code>None</code> if the data is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObject store.\nSet of data pages included in this sparse chunk. Each …\nLength of the full column chunk\nA selection of row groups.\nA row selection with its count.\nHelper function to either add a new <code>RowSelector</code> to …\nConcatenates <code>other</code> into <code>self</code>. <code>other</code> must not contain row …\nReturns true if the selection contains a row group with …\nReturns true if the selection contains a row group with …\nFills the missing row groups with empty selections. This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>RowGroupSelection</code> from the output of …\nCreates a new <code>RowGroupSelection</code> from a set of row IDs.\nCreates a new <code>RowGroupSelection</code> from a set of row ranges.\nReturns the row selection for a given row group.\nGroups row IDs by their row group.\nIntersects two <code>RowGroupSelection</code>s.\nPorted from <code>parquet</code> but trailing rows are removed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the selection is empty.\nReturns an iterator over the row groups in the selection.\nReturns the memory usage of the selection.\nCreates a new <code>RowGroupSelection</code> with all row groups …\nReturns the first row group in the selection.\nRemoves a row group from the selection.\nReturns the number of rows in the selection.\nTotal number of rows in the selection.\nNumber of rows in the selection.\nReturns the number of row groups in the selection.\nConverts an iterator of row ranges into a <code>RowSelection</code> by …\nConverts an iterator of sorted row IDs into a <code>RowSelection</code>.\nRow selection.\nRow group id to row selection.\nReturns the length of the selectors in the selection.\nTotal length of the selectors.\nLength of the selectors.\nStatistics for pruning row groups.\nReturns the column id of specific column name if we need …\nReturns the default value of all row groups for <code>column</code> …\nReturns the null count of all row groups for <code>column</code> …\nThe metadata of the region. It contains the schema a query …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new statistics to prune specific <code>row_groups</code>.\nHelper to read the SST.\nMetadata of SST row groups.\nParquet SST writer.\nWorkaround for AsyncArrowWriter does not provide a method …\nCurrent active file id.\nCurrent active indexer.\nCustomizes per-column config according to schema and maybe …\nCleaner to remove temp files on failure.\nFinishes current SST file and index file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndexer build that can create indexer for multiple files.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes write and return the collected metrics.\nRegion metadata of the source and the target SST.\nWrite metrics\nCreates a new parquet SST writer.\nNumber of rows fetched.\nPath provider that creates SST and index file paths …\nTime range of fetched batches.\nGets min and max timestamp from an timestamp array.\nIterates source and writes all rows to Parquet file.\nIterates FlatSource and writes all RecordBatch in flat …\nMetadata of files in the same SST level.\nA version of all SSTs in a region.\nAdd files to the version.\nHandles of SSTs in this level.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns expired SSTs from current level.\nReturns SST index files’space occupied in current …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLevel number.\nReturns a slice to metadatas of all levels.\nSST metadata organized by levels.\nMarks all SSTs in this version as deleted.\nReturns a new SstVersion.\nReturns an empty meta of specific <code>level</code>.\nReturns the number of SST files.\nReturns the number of rows in SST files. For historical …\nRemove files from the version.\nReturns SST data files’space occupied in current version.\nDefault implementation of the time provider based on std.\nTrait to get current time and deal with durations.\nReturns current time in millis.\nReturns millis elapsed since specify time.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the actual duration to wait from an expected one.\nWAL entry id.\nWrite ahead log.\nA stream that yields tuple of WAL entry id and …\nWAL batch writer.\nAdd a wal entry for specific region to the writer’s …\nEntries to write.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Wal from the log store.\nMark entries whose ids <code>&lt;= last_id</code> as deleted.\nReturns a [OnRegionOpened] function.\nProviders of regions being written into.\nScan entries of specific region starting from <code>start_id</code> …\nLog store of the WAL.\nThe underlying log store.\nReturns a WalEntryReader\nWrite all buffered entries to the WAL.\nReturns a writer to write to the WAL.\nThe default buffer size of the Entry receiver.\nWalEntryDistributor distributes Wal entries to specific …\nReceives the Wal entries from WalEntryDistributor.\nWaits for the arg from the WalEntryReader.\nSends the <code>start_id</code> to the WalEntryDistributor.\nReturns WalEntryDistributor and batch WalEntryReceivers.\nDistributes entries to specific WalEntryReceivers based on …\nReceives the Entry from the WalEntryDistributor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSends Entry to receivers based on RegionId\nA Reader reads the Entry from RawEntryReader and decodes …\nWalEntryReader provides the ability to read and decode …\nDecodes the Entry into WalEntry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA stream that yields Entry.\nImplement the RawEntryReader for the LogStore.\nRawEntryReader provides the ability to read Entry from the …\nA RawEntryReader reads [RawEntry] belongs to a specific …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInterval to check whether regions should flush.\nMax delay to check region periodical tasks.\nWorker to write and alter regions bound to it.\nBackground worker loop to handle requests.\nBuffer for stalled write requests.\nA fixed size group of RegionWorkers.\nIdentifier for a worker.\nWrapper that only calls event listener in tests.\nWorker start config.\nAppends stalled requests.\nReturns cache of the group.\nCache.\nCache.\nCleans up the worker.\nCompaction background job pool.\nScheduler for compaction tasks.\nEngine config.\nRegions that are not yet fully dropped.\nEstimated size of all stalled requests.\nDatanode level file references manager.\nFile reference manager.\nFlush background job pool.\nFlushes regions periodically.\nWatch channel receiver to wait for background flush job.\nWatch channel receiver to wait for background flush job.\nFinds some regions to flush to reduce write buffer usage.\nSchedules background flush requests.\nWatch channel sender to notify workers to handle stalled …\nWatch channel sender to notify workers to handle stalled …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns region of specific <code>region_id</code>.\nReturns region of specific <code>region_id</code>.\nHandle to the worker thread.\nHandling alter related requests.\nHandles region metadata changes.\nHandles requests that changes region options, like TTL. It …\nHandles region background request\nHandles bulk insert requests.\nHandling catchup request.\nHandling close request.\nWhen compaction fails, we simply log the error.\nHandles compaction finished, update region version and …\nHandles compaction request submitted to region worker.\nHandling create request.\nTakes and handles all ddl requests.\nHandling drop request.\nHandling flush related requests.\nOn region flush job failed.\nOn region flush job finished.\nHandles manual flush request.\nHandles manifest.\nWrites region change action to the manifest and then …\nHandles region change result.\nWrites truncate action to the manifest and then applies it …\nHandling open request.\nHandle periodical tasks such as region auto flush.\nHandles region edit request.\nHandles region edit result.\nHandles a specific region’s stalled requests.\nHandles region sync request.\nDispatches and processes requests.\nHandles all stalled write requests.\nHandling truncate related requests.\nHandles truncate result.\nHandling write requests.\nTakes and handles all write requests.\nId of the worker.\nId of the worker.\nIntermediate manager for inverted index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the worker contains specific region.\nReturns true if the specific region exists.\nReturns true if the region is opening.\nReturns true if the specific region is opening.\nReturns true if the worker is still running.\nLast time to check regions periodically.\nEvent listener for tests.\nChecks whether the engine reaches flush threshold. If so, …\nMemtable builder provider for each region.\nCreates a flush task with specific <code>reason</code> for the <code>region</code>.\nNotifies the whole group that a flush job is finished so …\nManages object stores for manifest and SSTs.\nFlush is finished successfully.\nOn later drop task is finished.\nEngine is stalled.\nThe opening regions.\nRegions that are opening.\nPartition expr fetcher used to backfill partition expr on …\nValidates and groups requests by region.\nProcesses bulk insert requests.\nPuffin manager factory for index.\nBackground purge job scheduler.\nScheduler for file purgers.\nPushes a stalled request to the buffer.\nRequest receiver.\nGauge of regions in the worker.\nQueues for region edit requests.\nRegions bound to the worker.\nRegions bound to the worker.\nRejects a specific region’s stalled requests.\nRejects all stalled requests.\nRemoves stalled requests of specific region.\nReopens a region.\nHistogram of request wait time for this worker.\nStalled requests. Remember to use …\nStarts the worker loop.\nWhether to run the worker thread.\nWhether the worker thread is still running.\nSchedule compaction for the region if necessary.\nDatabase level metadata manager.\nRequest sender.\nRequest sender.\nHandles <code>set_region_role_gracefully</code>.\nSets whether the worker is still running.\nReturns true if the engine needs to reject some write …\nReturns the total number of all stalled requests.\nStalled write requests.\nGauge of stalling request count.\nStarts a region worker and its background thread.\nStarts a worker group.\nStop the worker.\nStops the worker group.\nSubmits request to background worker thread.\nSubmits a request to a worker in the group.\nProvider to get current time.\nUpdates the latest entry id since flush of the region. …\nWAL of the engine.\nGet worker for specific <code>region_id</code>.\nComputes a initial check delay for a worker.\nWorkers of the group.\nEngine write buffer manager.\nCreates a metadata after applying the alter <code>request</code> to the …\nBackground GC task to remove the entire region path once …\nRemoves region dir if there is no parquet files, returns …\nA queue for temporary store region edit requests, if the …\nChecks the edit, writes and applies it.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRejects delete request under append mode.\nSend rejected error to all <code>write_requests</code>.")